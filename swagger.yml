openapi: 3.0.3
info:
  version: 1.0.0
  title: Etra user management - API Spec

security:
  - bearerAuth: []

paths:
  /v1/system/ping:
    get:
      operationId: ping
      summary: Replies with pong
      description: Replies ping with pong
      tags:
        - System
      responses:
        "200":
          description: Pong
          content:
            text/plain:
              schema:
                type: string

  /v1/system/tasks/count:
    get:
      operationId: getTasksCount
      summary: Replies with tasks count
      description: Replies with tasks count
      tags:
        - System
      responses:
        "200":
          description: Tasks count
          content:
            text/plain:
              schema:
                type: string

  /v1/system/indexTasks/count:
    get:
      operationId: getIndexTaskCount
      summary: Replies with index task count
      description: Replies with index task count
      tags:
        - System
      responses:
        "200":
          description: Index task count
          content:
            text/plain:
              schema:
                type: string

  /v1/system/resources/{resourceId}/permissions/refresh:
    get:
      operationId: refreshResourceAccessPermissions
      summary: refreshes permissions for resource
      description: refreshes permissions for resource
      parameters:
        - name: resourceId
          required: true
          in: path
          description: resource id
          schema:
            type: string
            format: uuid
      tags:
        - System
      responses:
        "200":
          description: Number of users processed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourcePermissionRefreshResponse"

  /v1/system/resourceAccessTasks/count:
    get:
      operationId: countResourceAccessTasks
      summary: counts resource access tasks by given filters
      description: counts resource access tasks by given filters
      parameters:
        - name: resourceId
          in: query
          description: Count by resource id
          schema:
            type: string
            format: uuid
        - name: userId
          in: query
          description: Count by user id
          schema:
            type: string
            format: uuid
      tags:
        - System
      responses:
        "200":
          description: Number of active tasks
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceAccessCountResponse"

  /v1/system/permissions/refresh:
    get:
      operationId: refreshAccessPermissions
      summary: refreshes permissions
      description: refreshes permissions
      tags:
        - System
      responses:
        "200":
          description: OK when done
          content:
            text/plain:
              schema:
                type: string

  /v1/system/index/refreshUsersIndex:
    get:
      operationId: refreshUsersIndex
      summary: refreshes user index
      description: refreshes user index
      tags:
        - System
      responses:
        "200":
          description: OK when done
          content:
            text/plain:
              schema:
                type: string

  /v1/system/index/refreshGroupsIndex:
    get:
      operationId: refreshGroupsIndex
      summary: refreshes elastic index
      description: refreshes elastic index
      tags:
        - System
      responses:
        "200":
          description: OK when done
          content:
            text/plain:
              schema:
                type: string

  /v1/system/webhook/keycloak:
    post:
      operationId: handleKeycloakWebhook
      summary: Handles incoming webhook from etra cloud listener keycloak plugin
      description: Handles incoming webhook from etra cloud listener keycloak plugin
      tags:
        - System
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KeycloakWebhook"
        description: Payload
        required: true
      responses:
        "200":
          description: OK when done
          content:
            text/plain:
              schema:
                type: string

  /v1/groups:
    get:
      operationId: listGroups
      summary: List Groups.
      description: Lists Groups.
      tags:
        - Groups
      parameters:
        - name: search
          in: query
          description: Free text search
          schema:
            type: string
        - name: groupName
          in: query
          description: name to search groups with
          schema:
            type: string
        - name: attributeName
          in: query
          description: attribute name to search groups with
          schema:
            type: string
        - name: attributeValue
          in: query
          description: attribute value to search groups with
          schema:
            type: string
        - name: searchAllGroups
          in: query
          description: if enabled search will be performed from all groups not just top level cloud groups
          schema:
            type: boolean
        - name: first
          in: query
          description: First result.
          schema:
            type: integer
        - name: max
          in: query
          description: Max results.
          schema:
            type: integer
      responses:
        "200":
          description: List of groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GroupRepresentation"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createGroup
      summary: Create group
      description: Create new group
      tags:
        - Groups
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupRepresentation"
        description: Payload
        required: true
      responses:
        "200":
          description: Created group
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupRepresentation"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/v1/groups/{groupId}":
    get:
      operationId: findGroup
      summary: Find a group.
      description: Finds a group by id.
      tags:
        - Groups
      parameters:
        - name: groupId
          required: true
          in: path
          description: groups id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Example
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupRepresentation"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: updateGroup
      summary: Updates groups
      description: Updates group, ignores subgroups
      tags:
        - Groups
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupRepresentation"
        description: Payload
        required: true
      parameters:
        - name: groupId
          required: true
          in: path
          description: group id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Updated group
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupRepresentation"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      operationId: deleteGroup
      summary: Deletes group
      description: Deletes group
      tags:
        - Groups
      parameters:
        - name: groupId
          required: true
          in: path
          description: group id
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Empty response indicating successful removal
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/v1/groups/{groupId}/children":
    post:
      operationId: setOrCreateChildGroup
      summary: Set or create child
      description: Will just set the parent if group exists. Otherwise will create the group and set the parent.
      tags:
        - Groups
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupRepresentation"
        description: Payload
        required: true
      parameters:
        - name: groupId
          required: true
          in: path
          description: group id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Updated or created group
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupRepresentation"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/v1/groups/{groupId}/users":
    get:
      operationId: listGroupUsers
      summary: List group users
      description: List group users
      tags:
        - Groups
      parameters:
        - name: groupId
          required: true
          in: path
          description: groups id
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
        - name: pageSize
          in: query
          description: Page size
          schema:
            type: integer
      responses:
        "200":
          description: Group user IDs
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: uuid
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/v1/groups/{groupId}/users/add":
    post:
      operationId: addUsersToGroup
      summary: Add users to group
      description: Add users to group
      tags:
        - Groups
      parameters:
        - name: groupId
          required: true
          in: path
          description: groups id
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                format: uuid
        description: List of users to be added to a group
        required: true
      responses:
        "201":
          description: Successful addition to the group
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/v1/groups/{groupId}/users/remove":
    post:
      operationId: removeUsersFromGroup
      summary: Remove users from group
      description: Remove users from group
      tags:
        - Groups
      parameters:
        - name: groupId
          required: true
          in: path
          description: groups id
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                format: uuid
        description: List of users to be added to a group
        required: true
      responses:
        "204":
          description: Empty response indicating successful removal
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                
  "/v1/groups/{parentGroupId}/upload":
    post:
      operationId: createGroupsFromCsv
      summary: Create groups from a csv-file.
      description: Creates groups from a csv-file as children for the specified parent group.
      tags:
        - Groups
      parameters:
        - name: parentGroupId
          required: true
          in: path
          description: Parent group for groups to be created
          schema:
            type: string
            format: uuid
        - name: targetEmail
          in: query
          description: Target email address for notification message when group creation completes.
          schema:
            type: string
      requestBody:
        description: Csv file with groups
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CSVFile"
      responses:
        "201":
          description: Successful request
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/users/upload:
    post:
      operationId: createUsersFromCsv
      summary: Create users from a csv-file.
      description: Create users from a csv-file.
      tags:
        - Users
      parameters:
        - name: targetEmail
          in: query
          description: Target email address for notification message when user creation completes.
          schema:
            type: string
      requestBody:
        description: Csv file with users
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CSVFile"
      responses:
        "201":
          description: Successful request
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/users:
    get:
      operationId: listUsers
      summary: List Users.
      description: Lists Users.
      tags:
        - Users
      parameters:
        - name: search
          in: query
          description: search string for the text search of the following fields - username, first name, last name, card code, email address, group names
          schema:
            type: string
        - name: hasAccessToResource
          in: query
          description: Filter by access to given resource ID
          schema:
            type: string
            format: uuid
        - name: hasAccessToResourceWithScope
          in: query
          description: Require users to have given scope to the resource defined in hasAccessToResource parameter
          schema:
            type: string
        - name: userIdentifier
          in: query
          description: Filter by user identifier
          schema:
            type: string
        - name: includeArchivedIdentifiers
          in: query
          description: Include archived identifiers
          schema:
            type: boolean
        - name: enabled
          in: query
          description: List realm user filter, default to false. X-Total-Count header includes both enabled and disabled users, no matter if the enabled filter is set or not(incompatible).
          schema:
            type: boolean
        - name: username
          in: query
          description: Filter by username
          schema:
            type: string
        - name: usernamePrefix
          in: query
          description: Filter by username prefix
          schema:
            type: string
        - name: fistName
          in: query
          description: Filter by fistName
          schema:
            type: string
        - name: lastName
          in: query
          description: Filter by lastName
          schema:
            type: string
        - name: email
          in: query
          description: Filter by email
          schema:
            type: string
        - name: groupName
          in: query
          description: Filter by group name
          schema:
            type: string
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
        - name: pageSize
          in: query
          description: Page size
          schema:
            type: integer
        - name: includeGroupsAndRoles
          in: query
          description: Return groups and roles
          schema:
            type: boolean
        - name: groupId
          in: query
          description: Filter by group ID
          schema:
            type: string
            format: uuid
        - name: groupPathPrefix
          in: query
          description: Filter by group path prefix
          schema:
            type: string
        - name: includeCardCodes
          in: query
          description: Include card codes
          schema:
            type: boolean
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserRepresentation"
          headers:
            X-Total-Count:
              schema:
                type: integer
                format: int64
              description: Total count of card codes.
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    post:
      operationId: createUser
      summary: Create user
      description: Create new user
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRepresentation"
        description: Payload
        required: true
      responses:
        "200":
          description: Created user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRepresentation"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/v1/users/{userId}/resetPassword":
    put:
      operationId: resetUserPassword
      summary: Reset an user password
      description: Reset an user password
      tags:
        - Users
      parameters:
        - name: userId
          required: true
          in: path
          description: user id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Succesful password reset
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/v1/users/{userId}":
    get:
      operationId: findUser
      summary: Find a users.
      description: Finds a user by id.
      tags:
        - Users
      parameters:
        - name: userId
          required: true
          in: path
          description: users id
          schema:
            type: string
            format: uuid
        - name: includeGroupsAndRoles
          in: query
          description: Should user groups and roles be filled to user representation
          schema:
            type: boolean
        - name: refresh
          in: query
          description: Refresh user in index from keycloak before replying
          schema:
            type: boolean
      responses:
        "200":
          description: Example
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRepresentation"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: updateUser
      summary: Updates users
      description: Updates user, ignores subusers
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRepresentation"
        description: Payload
        required: true
      parameters:
        - name: userId
          required: true
          in: path
          description: user id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Updated user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRepresentation"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      operationId: deleteUser
      summary: Deletes user
      description: Deletes user
      tags:
        - Users
      parameters:
        - name: userId
          required: true
          in: path
          description: user id
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Empty response indicating successful removal
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/v1/users/{userId}/resourceAccess":
    get:
      operationId: getUserResourceAccess
      summary: Gets user resource access
      description: Gets user resource access
      tags:
        - Users
      parameters:
        - name: userId
          required: true
          in: path
          description: user id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: List of user resource access objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserResourceAccess"

  "/v1/users/{userId}/resourceAccess/{resourceId}/scopes":
    get:
      operationId: getUserResourceAccessScopes
      summary: Gets user resource access scopes
      description: Gets user resource access for given resource scopes directly from Keycloak.
      tags:
        - Users
      parameters:
        - name: userId
          required: true
          in: path
          description: user id
          schema:
            type: string
            format: uuid
        - name: resourceId
          required: true
          in: path
          description: resource id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: User resource access scopes for given resource
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  "/v1/users/{userId}/groups":
    get:
      operationId: listUserGroups
      summary: List users groups
      description: Lists users groups
      tags:
        - Users
      parameters:
        - name: userId
          required: true
          in: path
          description: users id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Example
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GroupRepresentation"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/v1/users/{userId}/groups/{groupId}":
    put:
      operationId: addUserToGroup
      summary: Add user to group
      description: Adds user to group
      tags:
        - Users
      parameters:
        - name: userId
          required: true
          in: path
          description: users id
          schema:
            type: string
            format: uuid
        - name: groupId
          required: true
          in: path
          description: group id
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Empty response indicating successful addition
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      operationId: removeUserFromGroup
      summary: Remove user from group
      description: Removes user from group
      tags:
        - Users
      parameters:
        - name: userId
          required: true
          in: path
          description: users id
          schema:
            type: string
            format: uuid
        - name: groupId
          required: true
          in: path
          description: group id
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Empty response indicating successful addition
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/cardCodes:
    get:
      operationId: listCardCodes
      summary: List card codes.
      description: Lists card codes.
      tags:
        - CardCodes
      parameters:
        - name: userId
          in: query
          description: users id
          schema:
            type: string
            format: uuid
        - name: includeArchived
          in: query
          description: if archived card codes should be included in the list too
          schema:
            type: boolean
      responses:
        "200":
          description: List of card codes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CardCode"
          headers:
            X-Total-Count:
              schema:
                type: integer
                format: int64
              description: Total count of card codes.
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createCardCode
      summary: Create a card code.
      description: Creates a new card code.
      tags:
        - CardCodes
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CardCode"
        description: Payload
        required: true
      parameters:
        - name: userId
          in: query
          required: true
          description: users id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Created card code
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CardCode"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/cardCodes/{cardCodeId}:
    get:
      operationId: findCardCode
      summary: Find a card code.
      description: Finds a card code by id.
      tags:
        - CardCodes
      parameters:
        - name: cardCodeId
          required: true
          in: path
          description: card code id
          schema:
            type: string
            format: uuid
        - name: userId
          in: query
          required: true
          description: users id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Card
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CardCode"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: updateCardCode
      summary: Update a card code.
      description: Updates a card code
      tags:
        - CardCodes
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CardCode"
        description: Payload
        required: true
      parameters:
        - name: cardCodeId
          required: true
          in: path
          description: card code id
          schema:
            type: string
            format: uuid
        - name: userId
          in: query
          required: true
          description: users id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Updated card code
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CardCode"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: deleteCardCode
      summary: Delete a card code.
      description: Deletes a card code.
      tags:
        - CardCodes
      parameters:
        - name: cardCodeId
          required: true
          in: path
          description: card code id
          schema:
            type: string
            format: uuid
        - name: userId
          in: query
          required: true
          description: users id
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Success
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/v1/resources":
    get:
      operationId: listResources
      summary: List resources.
      description: Lists resources.
      tags:
        - Resources
      parameters:
        - name: name
          in: query
          description: name string
          schema:
            type: string
      responses:
        "200":
          description: List of Resources
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ResourceRepresentation"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createResource
      summary: Create a resource.
      description: Creates a new resource.
      tags:
        - Resources
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResourceRepresentation"
        description: Payload
        required: true
      responses:
        "200":
          description: Created resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceRepresentation"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/resources/upload:
    post:
      operationId: createResourcesFromCsv
      summary: Create resources from a csv-file.
      description: Create resources from a csv-file.
      tags:
        - Resources
      requestBody:
        description: Csv file with resources
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CSVFile"
      responses:
        "201":
          description: Successful request
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/v1/resources/{resourceId}":
    delete:
      operationId: deleteResource
      summary: Delete a resource.
      description: Deletes a resource.
      tags:
        - Resources
      parameters:
        - name: resourceId
          required: true
          in: path
          description: resource id
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Empty response indicating successful removal
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/v1/resources/{resourceId}/permissions":
    get:
      operationId: listResourcePermissions
      summary: Lists resource permissions.
      description: Lists resource permissions.
      tags:
        - Resources
      parameters:
        - name: resourceId
          required: true
          in: path
          description: Resource id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: List of permissions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Permission"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/v1/resources/{resourceId}/policies":
    get:
      operationId: listResourcePolicies
      summary: Lists resource policies.
      description: Lists resource policies.
      tags:
        - Resources
      parameters:
        - name: resourceId
          required: true
          in: path
          description: Resource id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: List of policies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Policy"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: createResourcePolicy
      summary: Creates new resource policy
      description: Creates new resource policy
      tags:
        - Resources
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Policy"
        description: Payload
        required: true
      parameters:
        - name: resourceId
          required: true
          in: path
          description: Resource id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Created policy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Policy"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/v1/resources/{resourceId}/policies/{policyId}":
    get:
      operationId: findResourcePolicy
      summary: Finds resource policy by id
      description: Finds resource policy by id
      tags:
        - Resources
      parameters:
        - name: resourceId
          required: true
          in: path
          description: Resource id
          schema:
            type: string
            format: uuid
        - name: policyId
          required: true
          in: path
          description: Policy id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Found policy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Policy"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: updateResourcePolicy
      summary: Updates resource policy
      description: Updates resource policy
      tags:
        - Resources
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Policy"
        description: Payload
        required: true
      parameters:
        - name: resourceId
          required: true
          in: path
          description: Resource id
          schema:
            type: string
            format: uuid
        - name: policyId
          required: true
          in: path
          description: Policy id
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Updated policy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Policy"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: deleteResourcePolicy
      summary: deletes resource policy
      description: deletes resource policy
      tags:
        - Resources
      parameters:
        - name: resourceId
          required: true
          in: path
          description: Resource id
          schema:
            type: string
            format: uuid
        - name: policyId
          required: true
          in: path
          description: Policy id
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Empty response indicating successful removal
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /v1/batches:
    get:
      operationId: listBatches
      summary: Lists batches with given filters
      description: Lists batches with given filters
      tags:
        - Batch
      parameters:
        - name: type
          in: query
          description: Batch type
          schema:
            $ref: "#/components/schemas/BatchType"
        - name: status
          in: query
          description: Batch status
          schema:
            $ref: "#/components/schemas/BatchStatus"
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
        - name: pageSize
          in: query
          description: Page size
          schema:
            type: integer
      responses:
        "200":
          description: List of batches
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Batch"
          headers:
            X-Total-Count:
              schema:
                type: integer
                format: int64
              description: Total count of batches with given filters.
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/v1/batches/{batchId}":
    delete:
      operationId: deleteBatch
      summary: Delete a batch.
      description: Deletes a batch.
      tags:
        - Batch
      parameters:
        - name: batchId
          required: true
          in: path
          description: Batch id
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Success
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/v1/validate":
    post:
      operationId: validateField
      summary: Validates a field
      description: Validates a field
      tags:
        - Validation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ValidationRequest"
        description: Payload
        required: true
      responses:
        "200":
          description: Validation result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationResult"
        "default":
          description: Invalid request was sent to the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      description: Error object
      required:
        - code
        - message
      properties:
        status:
          type: integer
          format: int32
        message:
          type: string

    GroupShortRepresentation:
      type: object
      description: Short group representation
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
        path:
          type: string
        subGroups:
          type: array
          items:
            $ref: "#/components/schemas/GroupShortRepresentation"

    GroupRepresentation:
      type: object
      description: Group representation
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
        path:
          type: string
        parentId:
          type: string
        subGroupCount:
          format: int64
          type: integer
        subGroups:
          type: array
          items:
            $ref: '#/components/schemas/GroupRepresentation'
        attributes:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        realmRoles:
          type: array
          items:
            type: string
        clientRoles:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        access:
          type: object
          additionalProperties:
            type: boolean

    UserRepresentation:
      type: object
      description: User representation
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        emailVerified:
          type: boolean
        attributes:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        self:
          type: string
        origin:
          type: string
        createdTimestamp:
          format: int64
          type: integer
        enabled:
          type: boolean
        totp:
          type: boolean
        federationLink:
          type: string
        serviceAccountClientId:
          type: string
        disableableCredentialTypes:
          uniqueItems: true
          type: array
          items:
            type: string
        requiredActions:
          type: array
          items:
            type: string
        realmRoles:
          type: array
          items:
            type: string
        clientRoles:
          type: object
        notBefore:
          format: int32
          type: integer
        applicationRoles:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          deprecated: true
        groups:
          type: array
          items:
            type: string
        access:
          type: object
          additionalProperties:
            type: boolean
        groupPaths:
          type: array
          readOnly: true
          items:
            type: string
        cardCodes:
          type: array
          description: List of card codes (Optional)
          items:
            type: string
          readOnly: true
        resourceAccesses:
          readOnly: true
          type: array
          items:
            $ref: "#/components/schemas/ResourceAccessItem"

    ResourceAccessItem:
      type: object
      properties:
        resourceId:
          type: string
          format: uuid
          readOnly: true
        scope:
          type: string
          description: Scope name
          readOnly: true

    ResourceRepresentation:
      type: object
      description: Resource representation
      required:
        - name
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
        scopes:
          type: array
          items:
            type: string

    UserResourceAccess:
      type: object
      description: Resource representation
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        userId:
          type: string
          format: uuid
        resourceId:
          type: string
          format: uuid
        scope:
          type: string

    CardCode:
      type: object
      description: Card code object
      required:
        - code
        - archived
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        userId:
          type: string
          format: uuid
          description: User keycloak ID
          readOnly: true
        code:
          type: string
          description: Card code
        archived:
          type: boolean
          description: If the code was archived
        description:
          type: string
          description: More detailed description of card code
        createdAt:
          type: string
          format: date-time
          description: Created at date
        modifiedAt:
          type: string
          format: date-time
          description: Modified at date

    Permission:
      type: object
      description: Permission object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          description: Permission name

    CSVFile:
      type: object
      description: Csv file
      required:
        - content
      properties:
        content:
          type: string
        name:
          type: string

    KeycloakWebhook:
      type: object
      description: Webhook from etra cloud listener keycloak plugin
      properties:
        resourceType:
          type: string
        operationType:
          type: string
        userId:
          type: string
        groupId:
          type: string
        creatorId:
          type: string

    Policy:
      type: object
      properties:
        id:
          type: string
          format: uuid
        resourceId:
          type: string
          format: uuid
          readOnly: true
        description:
          type: string
        name:
          type: string
        permissionIds:
          type: array
          description: List of permission ids
          items:
            type: string
            format: uuid
        type:
          $ref: "#/components/schemas/PolicyType"
        userIds:
          type: array
          description: List of user Id's. Atleast one user id or group id has to be provided
          items:
            type: string
            format: uuid
        groupIds:
          type: array
          description: List of group Id's. Atleast one user id or group id has to be provided
          items:
            type: string
            format: uuid

    PolicyType:
      type: string
      enum:
        - USER
        - GROUP

    ResourcePermissionRefreshResponse:
      type: object
      description: resource permissions refresh response
      properties:
        userProcessed:
          type: integer

    ResourceAccessCountResponse:
      type: object
      description: Resource access task count
      properties:
        activeTasks:
          type: integer

    BatchType:
      type: string
      description: Task type enum
      enum:
        - USERS
        - GROUPS
        - RESOURCES

    BatchStatus:
      type: string
      description: Batch status enum
      enum:
        - PENDING
        - IN_PROGRESS
        - COMPLETED
        - FAILED

    Batch:
      type: object
      description: Batch object
      required:
        - batchType
        - batchStatus
        - batchContent
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Batch id in UUID format
        batchType:
          $ref: "#/components/schemas/BatchType"
        batchStatus:
          $ref: "#/components/schemas/BatchStatus"
        fileName:
          type: string
          description: Batch file name
        totalEntries:
          type: integer
          description: Total number of entries in the batch
        successfulEntries:
          type: integer
          description: Number of successful entries in the batch
        failedEntries:
          type: integer
          description: Number of failed entries in the batch
        errors:
          type: array
          description: List of possible errors
          items:
            type: string
        creatorId:
          type: string
          format: uuid
          description: ID of creator
        createdAt:
          type: string
          format: date-time
          description: Created date
        lastModifierId:
          type: string
          format: uuid
          description: Id of last modifier
        modifiedAt:
          type: string
          format: date-time
          description: Date modified

    ValidationRequest:
      type: object
      required:
        - field
        - value
      properties:
        field:
          $ref: "#/components/schemas/ValidationField"
        value:
          type: string
          description: Value to be validated. For now this should be string value.

    ValidationField:
      type: string
      description: Validation field enum
      enum:
        - USERNAME
        - USER_EMAIL
        - CARD_CODE

    ValidationResult:
      type: object
      description: Validation result
      required:
        - valid
      properties:
        valid:
          type: boolean
          description: Was validation was successful
        validationErrorType:
          $ref: "#/components/schemas/ValidationErrorType"

    ValidationErrorType:
      type: string
      description: Validation error type enum
      enum:
        - USERNAME_ALREADY_EXISTS
        - USER_EMAIL_ALREADY_EXISTS
        - CARD_CODE_ALREADY_EXISTS
